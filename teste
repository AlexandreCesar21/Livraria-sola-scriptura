// vendas.js — completo, robusto e com NOTIFICAÇÕES no canto superior direito
document.addEventListener("DOMContentLoaded", () => {
  try {
    const $ = id => document.getElementById(id);

    /* ================================
       Sistema de Notificações (Toast)
       ================================ */
    function mostrarNotificacao(mensagem, tipo = "sucesso") {
      // remove notificações antigas (uma de cada vez)
      document.querySelectorAll(".notificacao-toast").forEach(n => n.remove());

      const toast = document.createElement("div");
      toast.classList.add("notificacao-toast", tipo);

      const icone = tipo === "sucesso" ? "✔" : "✖";

      toast.innerHTML = `
        <span class="icone-toast">${icone}</span>
        <div class="mensagem-toast">${mensagem}</div>
      `;

      // adiciona estilos CSS (inline - para não depender de style.css)
      const styleId = "notificacao-toast-styles";
      if (!document.getElementById(styleId)) {
        const estilo = document.createElement("style");
        estilo.id = styleId;
        estilo.innerHTML = `
          .notificacao-toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #3c0d0d;
            color: white;
            font-weight: 600;
            font-family: "Inter", sans-serif;
            border-radius: 8px;
            padding: 12px 16px;
            box-shadow: 0 6px 18px rgba(0,0,0,0.18);
            display: flex;
            align-items: center;
            gap: 12px;
            opacity: 0;
            transform: translateY(-12px);
            z-index: 99999;
            transition: opacity 0.35s ease, transform 0.35s ease;
            max-width: 380px;
          }
          .notificacao-toast.sucesso { background-color: #3c0d0d; }
          .notificacao-toast.erro { background-color: #b91c1c; }
          .notificacao-toast .icone-toast { font-size: 18px; line-height: 1; }
          .notificacao-toast .mensagem-toast { font-size: 14px; white-space: pre-wrap; }
        `;
        document.head.appendChild(estilo);
      }

      document.body.appendChild(toast);
      // entrada
      requestAnimationFrame(() => {
        toast.style.opacity = "1";
        toast.style.transform = "translateY(0)";
      });

      // remove automaticamente após 4s
      setTimeout(() => {
        toast.style.opacity = "0";
        toast.style.transform = "translateY(-12px)";
        setTimeout(() => toast.remove(), 350);
      }, 4000);
    }

    /* ================================
       Seletores e constantes
       ================================ */
    // elementos principais — tolerância: só usa se existir
    const cartBookSelect = $("cartBookSelect");
    const cartQuantity = $("cartQuantity");
    const addToCartBtn = $("addToCartBtn");
    const cartItemsContainer = $("cartItems");
    const clearCartBtn = $("clearCartBtn");
    const checkoutSection = $("checkoutSection");
    const checkoutClientSelect = $("checkoutClientSelect");
    const checkoutPaymentMethod = $("checkoutPaymentMethod");
    const checkoutDiscount = $("checkoutDiscount");
    const checkoutNotes = $("checkoutNotes");
    const checkoutForm = $("checkoutForm");
    const finalTotalSpan = $("finalTotal");
    const cartItemCount = $("cartItemCount");
    const salesTableBody = $("salesTableBody");
    const returnsTableBody = $("returnsTableBody");

    // devoluções
    const processReturnBtn = $("processReturnBtn");
    const returnModal = $("returnModal");
    const closeReturnModal = $("closeReturnModal");
    const cancelReturnBtn = $("cancelReturnBtn");
    const saleSelect = $("returnSaleSelect");
    const returnForm = $("returnForm");
    const returnNotes = $("returnNotes");
    const exchangeBookSelect = $("exchangeBookSelect");
    const returnType = $("returnType");
    const returnQuantity = $("returnQuantity");
    const returnReason = $("returnReason");

    // filtros IDs (do HTML)
    const filterIds = [
      "filterSalesDateFrom",
      "filterSalesDateTo",
      "filterSalesCategory",
      "filterSalesAuthor",
      "filterSalesPublisher",
      "filterSalesClient"
    ];

    // localStorage keys
    const KEY_BOOKS = "livraria_books";
    const KEY_CLIENTS = "livraria_clients";
    const KEY_SALES = "livraria_sales";
    const KEY_RETURNS = "livraria_returns";
    const KEY_PRODUCTS = "produtosDiversos"; // opcional

    /* ================================
       Estado local e helpers de acesso
       ================================ */
    let books = JSON.parse(localStorage.getItem(KEY_BOOKS)) || [];
    let clients = JSON.parse(localStorage.getItem(KEY_CLIENTS)) || [];
    let sales = JSON.parse(localStorage.getItem(KEY_SALES)) || [];
    let returns = JSON.parse(localStorage.getItem(KEY_RETURNS)) || [];
    let products = JSON.parse(localStorage.getItem(KEY_PRODUCTS)) || [];

    const allBooks = () => JSON.parse(localStorage.getItem(KEY_BOOKS) || "[]");
    const allClients = () => JSON.parse(localStorage.getItem(KEY_CLIENTS) || "[]");
    const allSales = () => JSON.parse(localStorage.getItem(KEY_SALES) || "[]");
    const allReturns = () => JSON.parse(localStorage.getItem(KEY_RETURNS) || "[]");
    const allProducts = () => JSON.parse(localStorage.getItem(KEY_PRODUCTS) || "[]");

    const formatCurrency = v => "R$ " + Number(v || 0).toLocaleString("pt-BR", { minimumFractionDigits: 2 });
    const formatDate = d => { try { return new Date(d).toLocaleDateString("pt-BR"); } catch { return d || "—"; } };
    const formatTime = d => { try { return new Date(d).toLocaleTimeString("pt-BR"); } catch { return ""; } };

    function saveBooks() { localStorage.setItem(KEY_BOOKS, JSON.stringify(books)); }
    function saveClients() { localStorage.setItem(KEY_CLIENTS, JSON.stringify(clients)); }
    function saveSales() { localStorage.setItem(KEY_SALES, JSON.stringify(sales)); }
    function saveReturns() { localStorage.setItem(KEY_RETURNS, JSON.stringify(returns)); }
    function saveProducts() { localStorage.setItem(KEY_PRODUCTS, JSON.stringify(products)); }

    /* ================================
       Populadores de selects
       ================================ */
    function populateBookSelect() {
      books = allBooks();
      if (!cartBookSelect) return;
      cartBookSelect.innerHTML = `<option value="">Selecione um livro disponível</option>`;
      books.filter(b => ((b.status || b.situacao || "").toString().toUpperCase() === "ATIVO" || !b.status))
        .forEach(b => {
          const titulo = b.titulo || b.title || b.name || "Sem título";
          const autor = b.autor || b.author || "";
          const preco = b.preco || b.value || b.valor || 0;
          const opt = document.createElement("option");
          opt.value = String(b.id);
          opt.textContent = `${titulo} — ${autor} — ${formatCurrency(preco)}`;
          cartBookSelect.appendChild(opt);
        });
    }

    function populateClientSelect() {
      clients = allClients();
      if (!checkoutClientSelect) return;
      checkoutClientSelect.innerHTML = `<option value="">Selecione o cliente</option>`;
      clients.filter(c => ((c.status||"ATIVO").toUpperCase() === "ATIVO" || !c.status)).forEach(c => {
        const opt = document.createElement("option");
        opt.value = String(c.id);
        opt.textContent = c.nome || c.name || "Cliente sem nome";
        checkoutClientSelect.appendChild(opt);
      });
    }

    function populateExchangeBookSelect() {
      if (!exchangeBookSelect) return;
      exchangeBookSelect.innerHTML = `<option value="">Selecione um livro para troca</option>`;
      allBooks().forEach(b => {
        const opt = document.createElement("option");
        opt.value = String(b.id);
        opt.textContent = `${b.titulo || b.title || "Sem título"} — ${b.autor || b.author || ""}`;
        exchangeBookSelect.appendChild(opt);
      });
    }

    function populateReturnSalesSelect() {
      if (!saleSelect) return;
      saleSelect.innerHTML = `<option value="">Selecione a venda</option>`;
      const arr = allSales();
      if (!arr.length) {
        saleSelect.innerHTML += `<option disabled>Nenhuma venda registrada</option>`;
        return;
      }
      arr.forEach(s => {
        const cliente = allClients().find(c => String(c.id) === String(s.clienteId));
        const nomeCliente = cliente ? (cliente.nome || cliente.name) : "—";
        const total = formatCurrency(s.total);
        const dataVenda = formatDate(s.data);
        const itensTxt = (s.itens||[]).map(i => `${i.titulo} (${i.qtd}x)`).join(", ");
        const opt = document.createElement("option");
        opt.value = s.id;
        opt.textContent = `${dataVenda} - ${nomeCliente} - ${total} → ${itensTxt}`;
        saleSelect.appendChild(opt);
      });
    }

    /* ================================
       Carrinho
       ================================ */
    let cart = [];

    function updateCartUI() {
      if (!cartItemsContainer) return;
      cartItemsContainer.innerHTML = "";
      const totalItems = cart.reduce((a,c)=>a + (c.qtd || 0), 0);
      if (cartItemCount) cartItemCount.textContent = totalItems;
      if (!cart.length) {
        cartItemsContainer.innerHTML = `<div style="padding:16px;color:#777">Nenhum item no carrinho.</div>`;
        if (checkoutSection) checkoutSection.style.display = "none";
        if (finalTotalSpan) finalTotalSpan.textContent = formatCurrency(0);
        return;
      }
      cart.forEach((it, idx) => {
        const el = document.createElement("div");
        el.className = "cart-item-card";
        el.style = "display:flex;align-items:center;justify-content:space-between;padding:10px;border-bottom:1px solid #eee";
        el.innerHTML = `
          <div style="flex:1">
            <strong>${it.titulo}</strong><br><small>${it.autor||""}</small>
            <div style="margin-top:6px;color:#666">Preço: ${formatCurrency(it.preco)} • Estoque: ${it.estoque||0}</div>
          </div>
          <div style="display:flex;align-items:center;gap:8px">
            <button class="btn-decrease" data-idx="${idx}">−</button>
            <input class="cart-qty-input" value="${it.qtd}" style="width:48px;text-align:center" />
            <button class="btn-increase" data-idx="${idx}">+</button>
            <button class="btn-delete" data-idx="${idx}" title="Remover">🗑️</button>
          </div>
        `;
        cartItemsContainer.appendChild(el);
      });
      if (checkoutSection) checkoutSection.style.display = "block";
      recalcFinalTotal();
    }

    function recalcFinalTotal() {
      const subtotal = cart.reduce((a,it)=>a + ((Number(it.preco)||0) * Number(it.qtd||0)), 0);
      const desconto = Number(checkoutDiscount?.value) || 0;
      const total = subtotal - (subtotal * desconto / 100);
      if (finalTotalSpan) finalTotalSpan.textContent = formatCurrency(total);
      return total;
    }

    // adicionar ao carrinho
    addToCartBtn && addToCartBtn.addEventListener("click", () => {
      const id = cartBookSelect ? cartBookSelect.value : null;
      const qtd = Number(cartQuantity ? cartQuantity.value : 0) || 0;
      if (!id || qtd <= 0) { mostrarNotificacao("Selecione um livro e quantidade", "erro"); return; }
      const b = allBooks().find(x => String(x.id) === String(id));
      if (!b) { mostrarNotificacao("Livro não encontrado", "erro"); return; }
      const preco = b.preco || b.value || b.valor || 0;
      const estoque = Number(b.quantidade || b.quantity || b.stock || 0);
      if (qtd > estoque) { mostrarNotificacao("Quantidade maior que o estoque disponível", "erro"); return; }
      const existing = cart.find(i => String(i.id) === String(id));
      if (existing) {
        if (existing.qtd + qtd > estoque) { mostrarNotificacao("Excede estoque disponível", "erro"); return; }
        existing.qtd += qtd;
      } else {
        cart.push({
          id: String(b.id),
          titulo: b.titulo || b.title || "Sem título",
          autor: b.autor || b.author || "",
          preco: preco,
          qtd,
          estoque
        });
      }
      if (cartBookSelect) cartBookSelect.value = "";
      if (cartQuantity) cartQuantity.value = "";
      updateCartUI();
      mostrarNotificacao("Livro adicionado ao carrinho", "sucesso");
    });

    // limpar carrinho
    clearCartBtn && clearCartBtn.addEventListener("click", () => {
      cart = [];
      updateCartUI();
      mostrarNotificacao("Carrinho limpo", "sucesso");
    });

    // ações no carrinho (delegation)
    cartItemsContainer && cartItemsContainer.addEventListener("click", (ev) => {
      const dec = ev.target.closest(".btn-decrease");
      const inc = ev.target.closest(".btn-increase");
      const del = ev.target.closest(".btn-delete");
      if (dec) {
        const i = Number(dec.dataset.idx);
        if (cart[i]) cart[i].qtd = Math.max(1, cart[i].qtd - 1);
        updateCartUI();
      } else if (inc) {
        const i = Number(inc.dataset.idx);
        if (cart[i]) {
          const estoque = Number(cart[i].estoque || 0);
          if ((cart[i].qtd + 1) > estoque) { mostrarNotificacao("Excede estoque disponível", "erro"); return; }
          cart[i].qtd += 1;
        }
        updateCartUI();
      } else if (del) {
        const i = Number(del.dataset.idx);
        if (cart[i]) cart.splice(i,1);
        updateCartUI();
      }
    });

    cartItemsContainer && cartItemsContainer.addEventListener("change", (ev) => {
      const input = ev.target;
      if (input.classList && input.classList.contains("cart-qty-input")) {
        const card = input.closest(".cart-item-card");
        const idx = Array.from(cartItemsContainer.children).indexOf(card);
        if (idx >= 0 && cart[idx]) {
          const val = Math.max(1, Number(input.value) || 1);
          const estoque = Number(cart[idx].estoque || 0);
          cart[idx].qtd = Math.min(val, estoque);
          updateCartUI();
        }
      }
    });

    // finalizar venda
    checkoutForm && checkoutForm.addEventListener("submit", (ev) => {
      ev.preventDefault();
      if (!cart.length) { mostrarNotificacao("Carrinho vazio", "erro"); return; }
      const clienteId = checkoutClientSelect ? checkoutClientSelect.value : null;
      if (!clienteId) { mostrarNotificacao("Selecione o cliente", "erro"); return; }
      const pagamento = checkoutPaymentMethod ? checkoutPaymentMethod.value : "";
      if (!pagamento) { mostrarNotificacao("Selecione forma de pagamento", "erro"); return; }
      const desconto = Number(checkoutDiscount?.value) || 0;
      const total = recalcFinalTotal();
      const venda = {
        id: Date.now().toString(),
        data: new Date().toISOString(),
        clienteId,
        pagamento,
        desconto,
        total,
        status: "ATIVA",
        itens: cart.map(c => ({ id: c.id, titulo: c.titulo, qtd: c.qtd, preco: c.preco }))
      };
      // atualizar estoque dos livros
      cart.forEach(it => {
        const b = (allBooks()||[]).find(x => String(x.id) === String(it.id));
        if (b) {
          const qtdAtual = Number(b.quantidade || b.quantity || b.stock || 0);
          const novaQtd = Math.max(0, qtdAtual - Number(it.qtd || 0));
          if (b.quantidade !== undefined) b.quantidade = novaQtd;
          else if (b.quantity !== undefined) b.quantity = novaQtd;
          else b.quantidade = novaQtd;
        }
      });
      // persistir livros e venda
      books = allBooks();
      saveBooks();
      sales = allSales();
      sales.unshift(venda);
      saveSales();
      cart = [];
      updateCartUI();
      checkoutForm.reset();
      if (checkoutSection) checkoutSection.style.display = "none";
      renderSalesTable();
      mostrarNotificacao(`Venda finalizada com sucesso! Total: ${formatCurrency(total)}`, "sucesso");
    });

    /* ================================
       Tabelas de Vendas e Devoluções
       ================================ */
    function renderSalesTable(dataArray) {
      const arr = Array.isArray(dataArray) ? dataArray : allSales();
      if (!sales) sales = allSales();
      const toUse = Array.isArray(dataArray) ? dataArray : sales;
      if (!salesTableBody) return;
      salesTableBody.innerHTML = "";
      if (!toUse || toUse.length === 0) {
        salesTableBody.innerHTML = `<tr><td colspan="8" style="text-align:center;color:#999;">Nenhuma venda encontrada</td></tr>`;
        return;
      }
      toUse.forEach(s => {
        const cliente = (allClients() || []).find(c => String(c.id) === String(s.clienteId));
        const nomeCliente = cliente ? (cliente.nome || cliente.name) : "—";
        const qtdTotal = (s.itens||[]).reduce((a,i)=>a + (Number(i.qtd)||0),0);
        let tipoPag = (s.pagamento || "").toString().toLowerCase();
        let icon = "💵", label = s.pagamento || "";
        if (tipoPag.includes("credito") || tipoPag.includes("crédito")) { icon = "💳"; label = "Crédito"; }
        else if (tipoPag.includes("debito") || tipoPag.includes("débito")) { icon = "💳"; label = "Débito"; }
        else if (tipoPag.includes("pix")) { icon = "📱"; label = "Pix"; }
        else if (tipoPag.includes("transfer") || tipoPag.includes("transferência")) { icon = "🏦"; label = "Transferência"; }
        else if (tipoPag.includes("cheque")) { icon = "📄"; label = "Cheque"; }
        else if (tipoPag.includes("dinheiro")) { icon = "💵"; label = "Dinheiro"; }

        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td><div>${formatDate(s.data)}</div><small>${formatTime(s.data)}</small></td>
          <td><strong>${(s.itens && s.itens[0] && s.itens[0].titulo) || "Item sem título"}</strong><br><small>${(s.itens && s.itens[0] && (s.itens[0].autor||"")) || ""}</small></td>
          <td>${nomeCliente}</td>
          <td>${qtdTotal}</td>
          <td><span class="payment-badge">${icon} ${label}</span></td>
          <td><strong>${formatCurrency(s.total)}</strong></td>
          <td><span class="status-badge ${s.status === "ATIVA" ? "ativa" : "inativa"}">${s.status}</span></td>
          <td><button class="btn-action" data-sale-id="${s.id}">🔁</button></td>
        `;
        salesTableBody.appendChild(tr);
      });

      // ligar botões de ação (devolução)
      document.querySelectorAll(".btn-action").forEach(btn => {
        btn.removeEventListener("click", btn._fn);
        const fn = (e) => {
          const saleId = e.currentTarget.getAttribute("data-sale-id");
          if (!saleId) return;
          populateReturnSalesSelect();
          returnModal && returnModal.classList.add("show");
          if (saleSelect) saleSelect.value = saleId;
        };
        btn._fn = fn;
        btn.addEventListener("click", fn);
      });
    }

    function renderReturnsTable() {
      if (!returnsTableBody) return;
      returns = allReturns();
      returnsTableBody.innerHTML = "";
      if (!returns || returns.length === 0) {
        returnsTableBody.innerHTML = `<tr><td colspan="8" style="text-align:center;color:#999;">Nenhuma devolução registrada</td></tr>`;
        return;
      }
      returns.forEach(r => {
        const cliente = (allClients() || []).find(c => String(c.id) === String(r.clienteId));
        const nomeCliente = cliente ? (cliente.nome || cliente.name) : "—";
        const venda = (allSales() || []).find(v => String(v.id) === String(r.saleId));
        const dataVenda = venda ? formatDate(venda.data) : "—";
        const livro = r.itens && r.itens[0] ? r.itens[0].titulo : "—";
        const qtd = r.itens && r.itens[0] ? r.itens[0].qtd : 0;
        const valor = formatCurrency(r.total || 0);
        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td>${formatDate(r.data)}</td>
          <td>${dataVenda}</td>
          <td>${nomeCliente}</td>
          <td>${livro}</td>
          <td>${qtd}</td>
          <td><span class="payment-badge">💬 ${r.notes || r.type || "Outro"}</span></td>
          <td><strong style="color:#b22222">${valor}</strong></td>
          <td><span class="status-badge ativa">${r.status}</span></td>
        `;
        returnsTableBody.appendChild(tr);
      });
    }

    /* ================================
       Filtros de Vendas
       ================================ */
    function applySalesFilter() {
      const dateFromRaw = document.getElementById("filterSalesDateFrom")?.value || "";
      const dateToRaw = document.getElementById("filterSalesDateTo")?.value || "";
      const category = (document.getElementById("filterSalesCategory")?.value || "").trim().toLowerCase();
      const author = (document.getElementById("filterSalesAuthor")?.value || "").trim().toLowerCase();
      const publisher = (document.getElementById("filterSalesPublisher")?.value || "").trim().toLowerCase();
      const client = (document.getElementById("filterSalesClient")?.value || "").trim();

      const all = allSales();
      if (!dateFromRaw && !dateToRaw && !category && !author && !publisher && !client) {
        renderSalesTable(all);
        return;
      }

      const normalize = s => (s||"").toString().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"");
      const from = dateFromRaw ? new Date(dateFromRaw + "T00:00:00") : null;
      const to = dateToRaw ? new Date(dateToRaw + "T23:59:59") : null;

      const filtered = (all || []).filter(sale => {
        const sd = new Date(sale.data);
        if (from && sd < from) return false;
        if (to && sd > to) return false;
        if (client && String(sale.clienteId) !== String(client)) return false;
        if (!category && !author && !publisher) return true;
        return (sale.itens || []).some(item => {
          const book = (allBooks()||[]).find(b => String(b.id) === String(item.id));
          if (!book) return false;
          const cat = normalize(book.categoria || book.category || "");
          const aut = normalize(book.autor || book.author || "");
          const pub = normalize(book.editora || book.publisher || "");
          const catOk = !category || cat.includes(category);
          const autOk = !author || aut.includes(author);
          const pubOk = !publisher || pub.includes(publisher);
          return catOk && autOk && pubOk;
        });
      });
      renderSalesTable(filtered);
    }

    filterIds.forEach(id => {
      const el = document.getElementById(id);
      if (!el) return;
      const ev = (el.type === "date" || el.tagName === "SELECT") ? "change" : "input";
      el.addEventListener(ev, applySalesFilter);
    });

    /* ================================
       Devoluções (modal)
       ================================ */
    processReturnBtn && processReturnBtn.addEventListener("click", () => {
      populateReturnSalesSelect();
      returnModal && returnModal.classList.add("show");
    });
    closeReturnModal && closeReturnModal.addEventListener("click", ()=> returnModal && returnModal.classList.remove("show"));
    cancelReturnBtn && cancelReturnBtn.addEventListener("click", ()=> returnModal && returnModal.classList.remove("show"));

    returnType && returnType.addEventListener("change", (e)=> {
      const v = e.target.value;
      const group = document.getElementById("exchangeBookGroup");
      if (group) group.style.display = (v === "TROCA") ? "block" : "none";
      if (v === "TROCA") populateExchangeBookSelect();
    });

    returnForm && returnForm.addEventListener("submit", (ev)=> {
      ev.preventDefault();
      if (!saleSelect) return alert("Seletor de venda ausente.");
      const saleId = saleSelect.value;
      if (!saleId) return alert("Selecione a venda.");
      const sale = (allSales()||[]).find(s => String(s.id) === String(saleId));
      if (!sale) return alert("Venda não encontrada.");
      const notes = returnNotes ? returnNotes.value.trim() : "";
      const quant = returnQuantity ? Number(returnQuantity.value) || 1 : 1;
      const rtype = returnType ? (returnType.value || "DEVOLUCAO") : "DEVOLUCAO";
      const reason = returnReason ? (returnReason.value || "") : "";

      // repor estoque (simplificado: repõe a qtd indicada para cada item)
      sale.itens.forEach(it => {
        const book = (allBooks()||[]).find(b => String(b.id) === String(it.id));
        if (book) {
          const current = Number(book.quantidade || book.quantity || book.stock || 0);
          const add = Math.min(Number(it.qtd || quant), Number(it.qtd || quant));
          const newQt = current + add;
          if (book.quantidade !== undefined) book.quantidade = newQt;
          else if (book.quantity !== undefined) book.quantity = newQt;
          else book.quantidade = newQt;
        }
      });

      books = allBooks();
      saveBooks();

      const salesArr = allSales();
      const idx = salesArr.findIndex(s => String(s.id) === String(saleId));
      if (idx >= 0) {
        salesArr[idx].status = "DEVOLVIDA";
        localStorage.setItem(KEY_SALES, JSON.stringify(salesArr));
        sales = salesArr;
      } else {
        const sObj = sales.find(s => String(s.id) === String(saleId));
        if (sObj) { sObj.status = "DEVOLVIDA"; saveSales(); }
      }

      const devolucao = {
        id: Date.now().toString(),
        saleId: sale.id,
        clienteId: sale.clienteId,
        itens: sale.itens,
        total: sale.total,
        notes: notes || reason || "Outro",
        data: new Date().toISOString(),
        status: "Processada",
        type: rtype
      };
      returns = allReturns();
      returns.unshift(devolucao);
      localStorage.setItem(KEY_RETURNS, JSON.stringify(returns));
      renderReturnsTable();
      renderSalesTable();
      mostrarNotificacao("Devolução/Troca registrada com sucesso!", "sucesso");
      returnModal && returnModal.classList.remove("show");
      returnForm && returnForm.reset();
    });

    /* ================================
       Inicialização
       ================================ */
    try {
      populateBookSelect();
      populateClientSelect();
      populateFilterClients();
      populateExchangeBookSelect();
      renderSalesTable();
      renderReturnsTable();
    } catch (e) {
      console.error("Erro init vendas:", e);
    }

    function populateFilterClients() {
      const select = document.getElementById("filterSalesClient");
      if (!select) return;
      select.innerHTML = `<option value="">Todos os clientes</option>`;
      allClients().forEach(c => {
        const opt = document.createElement("option");
        opt.value = String(c.id);
        opt.textContent = c.nome || c.name || "Cliente";
        select.appendChild(opt);
      });
    }

    // expõe utilitários para debug/refresh
    window.__vendas = {
      refresh: function() {
        books = allBooks();
        clients = allClients();
        sales = allSales();
        returns = allReturns();
        products = allProducts();
        populateBookSelect();
        populateClientSelect();
        populateFilterClients();
        populateExchangeBookSelect();
        renderSalesTable();
        renderReturnsTable();
      },
      data: () => ({ books: allBooks(), clients: allClients(), sales: allSales(), returns: allReturns(), products: allProducts() })
    };

  } catch (err) {
    console.error("Erro venda.js:", err);
  }
});
